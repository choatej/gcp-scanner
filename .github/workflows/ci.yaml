name: CI
on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - main
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Megalinter and run
        run: |
          curl -sL https://raw.githubusercontent.com/nvuillam/mega-linter/master/install.sh | bash
          ./bin/mega-linter-runner

  build-react:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        sparse-checkout: visualizer
    - name: Read Node.js version from .node-version
      id: node_version
      run: echo ::set-output name=node_version::$(cat .node-version)
      working-directory: ${{ github.workspace }}/visualizer
    - name: Setup Node.js
      uses: actions/setup-node@v4.0.3
      with:
        node-version: ${{ steps.node_version.outputs.node_version }}
    - name: Install dependencies
      run: npm install
      working-directory: visualizer
    - name: build
      run: npm run build
      working-directory: visualizer

  test-react:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        sparse-checkout: visualizer
    - name: Read Node.js version from .node-version
      id: node_version
      run: echo ::set-output name=node_version::$(cat .node-version)
      working-directory: ${{ github.workspace }}/visualizer
    - name: Setup Node.js
      uses: actions/setup-node@v4.0.3
      with:
        node-version: ${{ steps.node_version.outputs.node_version }}
    - name: Install dependencies
      run: npm install
      working-directory: visualizer
    - name: test
      run: npm run test:dev
      working-directory: visualizer

  test-python:
    # this doesn't work on ubuntu-latest for some reason
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        sparse-checkout: scanner
    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
       python-version-file: ./scanner/pyproject.toml
    - name: Load cached Poetry installation
      id: cached-poetry
      uses: actions/cache@v4
      with:
        path: ~/.local
        key: poetry-0
    - name: install poetry
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      run: |
        poetry lock
        poetry install --with dev
      working-directory: scanner
    - name: test
      run: poetry run pytest -m "not acceptance" -W ignore::DeprecationWarning
      working-directory: scanner
